plugins {
	id 'application'
	id 'checkstyle'
	id 'jacoco'
	id 'org.springframework.boot' version '3.0.7'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.github.ben-manes.versions' version '0.38.0'
	id 'org.liquibase.gradle' version '2.2.0'
//	id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
//	id 'com.github.johnrengelman.processes' version '0.5.0'
//	id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

application {
	mainClass = 'hexlet.code.app.AppApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'

	annotationProcessor(
			'org.projectlombok:lombok',
//			'com.querydsl:querydsl-apt:5.0.0:jakarta',
			'jakarta.persistence:jakarta.persistence-api:3.1.0'
	)

	implementation(
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-validation',
			'io.jsonwebtoken:jjwt:0.9.1',
			'org.liquibase:liquibase-core',
//			'com.querydsl:querydsl-jpa:5.0.0:jakarta',
//			'com.rollbar:rollbar-spring-boot-webmvc:1.10.0',
			'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.boot:spring-boot-starter-actuator',
//			'org.springdoc:springdoc-openapi-ui:1.7.0'
	)

	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core',
			'info.picocli:picocli:4.7.1',
			'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'com.h2database:h2'
	)

	runtimeOnly (
			'com.h2database:h2',
			'org.postgresql:postgresql:42.6.0'
	)

	testImplementation(
			'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.security:spring-security-test',
			'org.springframework.boot:spring-boot-starter-test',
			'com.tobedevoured.modelcitizen:spring:0.8.3'
	)
}

wrapper {
	gradleVersion = '7.4'
	distributionType = Wrapper.DistributionType.ALL
}

compileJava {
	options.release = 17
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

diffChangelog {
	dependsOn compileJava
}

liquibase {
	activities {
		main {
			changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
			url 'jdbc:h2:./taskManager'
			referenceUrl 'hibernate:spring:hexlet.code.app.model.' +
					'?dialect=org.hibernate.dialect.H2Dialect' +
					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
		}
	}
}

//// Сборка фронтенда.
//// Выполняется только если ничего не изменилось.
//// *****************************************************************************
//frontend {
//	nodeVersion = '16.13.1'
//	installScript = 'install'
//	assembleScript = 'run build'
//	packageJsonDirectory = file("${projectDir}/frontend")
//}
//
//def configFrontendTasks = {
//	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
//	outputs.dir("$buildDir/resources/main/static")
//}
//
//assembleFrontend {
//	configure configFrontendTasks
//
//	doLast {
//		copy {
//			from "$projectDir/frontend/build"
//			into "$buildDir/resources/main/static"
//		}
//	}
//}
//
//installFrontend {
//	configure configFrontendTasks
//}
//
//processResources.dependsOn assembleFrontend
//// *****************************************************************************
